// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date")
                        .HasColumnName("booking_date");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<int>("CatererId")
                        .HasColumnType("int")
                        .HasColumnName("caterer_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date")
                        .HasColumnName("event_date");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethod");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("venue");

                    b.HasKey("Id")
                        .HasName("PK__Bookings__5DE3A5B191D2667E");

                    b.HasIndex("CatererId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("backend.Models.BookingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bookingItem_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.HasKey("Id")
                        .HasName("PK__BookingItems__5DE3A5B556fdfdf55467E");

                    b.HasIndex("BookingId");

                    b.HasIndex("ItemId");

                    b.ToTable("BookingItems");
                });

            modelBuilder.Entity("backend.Models.Caterer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("caterer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("userProfile_id");

                    b.HasKey("Id")
                        .HasName("PK__Caterers__BFFD0FA745D96B07");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Caterers");
                });

            modelBuilder.Entity("backend.Models.CuisineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatererId")
                        .HasColumnType("int")
                        .HasColumnName("CatererID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CuisineName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CatererId");

                    b.HasIndex(new[] { "CuisineName" }, "UQ__CuisineT__2C77DCC834D2F401")
                        .IsUnique();

                    b.ToTable("CuisineTypes");
                });

            modelBuilder.Entity("backend.Models.FavoriteList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatererId")
                        .HasColumnType("int")
                        .HasColumnName("caterer_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Favorite__46ACF4CBA515F89B");

                    b.HasIndex("CatererId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteList", (string)null);
                });

            modelBuilder.Entity("backend.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatererId")
                        .HasColumnType("int")
                        .HasColumnName("caterer_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CuisineId")
                        .HasColumnType("int")
                        .HasColumnName("cuisine_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("ServesCount")
                        .HasColumnType("int")
                        .HasColumnName("serves_count");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Items__52020FDD67FBD1D6");

                    b.HasIndex("CatererId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("backend.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Messages__0BBF6EE6E11D6A45");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Users__B9BE370F5DC6DC6F");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E61648AE41E8C")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userProfile_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Profiles__AEBB701FD3D6338F");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("backend.Models.Booking", b =>
                {
                    b.HasOne("backend.Models.Caterer", "Caterer")
                        .WithMany("Bookings")
                        .HasForeignKey("CatererId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__catere__4BAC3F29");

                    b.HasOne("backend.Models.User", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__custom__4AB81AF0");

                    b.Navigation("Caterer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("backend.Models.BookingItem", b =>
                {
                    b.HasOne("backend.Models.Booking", "Booking")
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingItems__booking__4AB81ArF0");

                    b.HasOne("backend.Models.Item", "Item")
                        .WithMany("BookingItems")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingItems__Item__4BAC3Ffe29");

                    b.Navigation("Booking");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("backend.Models.Caterer", b =>
                {
                    b.HasOne("backend.Models.UserProfile", "UserProfile")
                        .WithMany("Caterers")
                        .HasForeignKey("UserProfileId")
                        .IsRequired()
                        .HasConstraintName("FK__Profiles__ca_i__3F46685645454644");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("backend.Models.CuisineType", b =>
                {
                    b.HasOne("backend.Models.Caterer", "Caterer")
                        .WithMany("CuisineTypes")
                        .HasForeignKey("CatererId")
                        .IsRequired()
                        .HasConstraintName("FK_CuisineType_Caterer");

                    b.Navigation("Caterer");
                });

            modelBuilder.Entity("backend.Models.FavoriteList", b =>
                {
                    b.HasOne("backend.Models.Caterer", "Caterer")
                        .WithMany("FavoriteLists")
                        .HasForeignKey("CatererId")
                        .IsRequired()
                        .HasConstraintName("FK__FavoriteL__cater__5BE2A6F2");

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("FavoriteLists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__FavoriteL__custo__5AE41545B9");

                    b.Navigation("Caterer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Item", b =>
                {
                    b.HasOne("backend.Models.Caterer", "Caterer")
                        .WithMany("Items")
                        .HasForeignKey("CatererId")
                        .IsRequired()
                        .HasConstraintName("FK__Items__caterer_i__5629CD9C");

                    b.HasOne("backend.Models.CuisineType", "CuisineType")
                        .WithMany("Items")
                        .HasForeignKey("CatererId")
                        .IsRequired()
                        .HasConstraintName("FK__Items__caterer_i__562955565CD9C");

                    b.Navigation("Caterer");

                    b.Navigation("CuisineType");
                });

            modelBuilder.Entity("backend.Models.Message", b =>
                {
                    b.HasOne("backend.Models.User", "Receiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__receiv__5165187F");

                    b.HasOne("backend.Models.User", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__sender__5070F446");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("backend.Models.UserProfile", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Profiles__user_i__3F466844");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Booking", b =>
                {
                    b.Navigation("BookingItems");
                });

            modelBuilder.Entity("backend.Models.Caterer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CuisineTypes");

                    b.Navigation("FavoriteLists");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("backend.Models.CuisineType", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("backend.Models.Item", b =>
                {
                    b.Navigation("BookingItems");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FavoriteLists");

                    b.Navigation("MessageReceivers");

                    b.Navigation("MessageSenders");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("backend.Models.UserProfile", b =>
                {
                    b.Navigation("Caterers");
                });
#pragma warning restore 612, 618
        }
    }
}
